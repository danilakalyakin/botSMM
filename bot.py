import telebot
from telebot import types
from flask import Flask, request
import json
import os
import threading

# üîπ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7990097395:AAEKXo3sP-bu32bfVSscCI26aFmoibLcm5Y"
bot = telebot.TeleBot(TOKEN)

# üîπ –ù–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_username = "danilkalyakin"

# üîπ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
APPLICATIONS_FILE = "applications.json"

# üîπ –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
user_messages = {}

# ---------- –ü–ê–ù–ï–õ–¨ ----------
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìö –ö–µ–π—Å—ã", "üë®‚Äçüè´ –¢–∞—Ä–∏—Ñ—ã")
    markup.add("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
    markup.add("‚ÑπÔ∏è –û –±–æ—Ç–µ", "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    return markup

# ---------- START ----------
@bot.message_handler(commands=['start'])
def start(message):
    msg = bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç SMM –∞–≥–µ–Ω—Å—Ç–≤–∞ SHISH PROMOTION. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )
    save_message(message.chat.id, msg.message_id)

# ---------- –¢–ï–ö–°–¢ ----------
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "üìö –ö–µ–π—Å—ã":
        send_cases(message)
    elif message.text == "üë®‚Äçüè´ –¢–∞—Ä–∏—Ñ—ã":
        send_tariffs(message)
    elif message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        send_support_link(message)
    elif message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç":
        clear_chat(message)
    elif message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        show_about(message)
    elif message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        start_application(message)
    else:
        msg = bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòÖ", reply_markup=get_main_menu())
        save_message(message.chat.id, msg.message_id)

# ---------- CALLBACK ----------
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data.startswith("tariff_"):
        name = call.data.replace("tariff_", "")
        desc = {
            "Elementary": "–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: –æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã –ø–æ–¥ –∫–ª—é—á.",
            "Average": "–°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è.",
            "PRO": "–ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ: –≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, —Å–∞–π—Ç, —Ä–µ–∫–ª–∞–º–∞."
        }.get(name, "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", url=f"https://t.me/{admin_username}"))
        msg = bot.send_message(call.message.chat.id, f"üìã <b>{name}</b>\n\n{desc}", parse_mode="HTML", reply_markup=markup)
        save_message(call.message.chat.id, msg.message_id)

# ---------- –°–û–•–†–ê–ù–ï–ù–ò–ï –ú–ï–°–°–ê–î–ñ–ï–ô ----------
def save_message(chat_id, msg_id):
    if chat_id not in user_messages:
        user_messages[chat_id] = []
    user_messages[chat_id].append(msg_id)

# ---------- –ó–ê–Ø–í–ö–ò ----------
def save_application(application):
    if os.path.exists(APPLICATIONS_FILE):
        with open(APPLICATIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = []
    data.append(application)
    with open(APPLICATIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ---------- FLASK ----------
app = Flask(__name__)
WEBHOOK_URL = "https://botsmm.onrender.com/"  # —Ç–≤–æ–π URL –Ω–∞ Render

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return "Bot is running!", 200

# ---------- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –í–ï–ë–•–£–ö–ê ----------
def set_webhook():
    try:
        info = bot.get_webhook_info()
        if info.url != WEBHOOK_URL + TOKEN:
            bot.remove_webhook()
            bot.set_webhook(url=WEBHOOK_URL + TOKEN)
            print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ")
        else:
            print("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:", e)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
threading.Thread(target=set_webhook).start()

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
