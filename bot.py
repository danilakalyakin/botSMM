import telebot
from telebot import types
from flask import Flask, request
import json
import os
import time

# üîπ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7990097395:AAEKXo3sP-bu32bfVSscCI26aFmoibLcm5Y"
bot = telebot.TeleBot(TOKEN)

# üîπ –ù–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_username = "danilkalyakin"

# üîπ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
APPLICATIONS_FILE = "applications.json"

# üîπ –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
user_messages = {}

# ---------- –ü–ê–ù–ï–õ–¨ ----------
def get_main_menu(chat_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìö –ö–µ–π—Å—ã", "üë®‚Äçüè´ –¢–∞—Ä–∏—Ñ—ã")
    markup.add("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
    markup.add("‚ÑπÔ∏è –û –±–æ—Ç–µ", "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"
    if chat_id == ADMIN_CHAT_ID:
        markup.add("üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    return markup

# ---------- –°–û–•–†–ê–ù–ï–ù–ò–ï –ú–ï–°–°–ê–î–ñ–ï–ô ----------
def save_message(chat_id, msg_id):
    if chat_id not in user_messages:
        user_messages[chat_id] = []
    user_messages[chat_id].append(msg_id)

# ---------- START ----------
@bot.message_handler(commands=['start'])
def start(message):
    msg = bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç SMM –∞–≥–µ–Ω—Å—Ç–≤–∞ SHISH PROMOTION. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )
    save_message(message.chat.id, msg.message_id)

# ---------- –¢–ï–ö–°–¢ ----------
@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    text = message.text
    save_message(chat_id, message.message_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if text == "üìö –ö–µ–π—Å—ã":
        send_cases(message)
    elif text == "üë®‚Äçüè´ –¢–∞—Ä–∏—Ñ—ã":
        send_tariffs(message)
    elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        send_support_link(message)
    elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç":
        clear_chat(message)
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        show_about(message)
    elif text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        start_application(message)
    elif text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" and chat_id == ADMIN_CHAT_ID:
        msg = bot.send_message(ADMIN_CHAT_ID, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        bot.register_next_step_handler(msg, broadcast_send)
    else:
        msg = bot.send_message(chat_id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòÖ", reply_markup=get_main_menu(chat_id))
        save_message(chat_id, msg.message_id)


# ---------- –ö–ï–ô–°–´ ----------
def send_cases(message):
    cases = [
        {"title": "–ö–µ–π—Å 1", "desc": "–ü—Ä–∏–º–µ—Ä –∫–µ–π—Å–∞ ‚Ññ1 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.", "link": f"https://t.me/{admin_username}"},
        {"title": "–ö–µ–π—Å 2", "desc": "–ü—Ä–∏–º–µ—Ä –∫–µ–π—Å–∞ ‚Ññ2 ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã.", "link": f"https://t.me/{admin_username}"},
        {"title": "–ö–µ–π—Å 3", "desc": "–ü—Ä–∏–º–µ—Ä –∫–µ–π—Å–∞ ‚Ññ3 ‚Äî –∫–µ–π—Å –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.", "link": f"https://t.me/{admin_username}"}
    ]
    for c in cases:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", url=c["link"]))
        text = f"üìò <b>{c['title']}</b>\n\n{c['desc']}"
        msg = bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=markup)
        save_message(message.chat.id, msg.message_id)
        time.sleep(0.1)  # —á—Ç–æ–±—ã Telegram –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

# ---------- –¢–ê–†–ò–§–´ ----------
def send_tariffs(message):
    tariffs = [
        {"name": "Elementary", "price": "25 000‚ÇΩ", "desc": "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"},
        {"name": "Average", "price": "45 000‚ÇΩ", "desc": "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"},
        {"name": "PRO", "price": "75 000‚ÇΩ", "desc": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"}
    ]
    for t in tariffs:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ ({t['name']})", callback_data=f"tariff_{t['name']}"))
        text = f"üíº <b>{t['name']}</b> ‚Äî {t['price']}\n{t['desc']}"
        msg = bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=markup)
        save_message(message.chat.id, msg.message_id)
        time.sleep(0.1)

# ---------- –ü–û–î–î–ï–†–ñ–ö–ê ----------
def send_support_link(message):
    link = f"https://t.me/{admin_username}"
    msg = bot.send_message(message.chat.id, f"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: {link}", reply_markup=get_main_menu())
    save_message(message.chat.id, msg.message_id)

# ---------- –û–ß–ò–°–¢–ö–ê –ß–ê–¢–ê ----------
def clear_chat(message):
    chat_id = message.chat.id
    msgs = user_messages.get(chat_id, [])

    if not msgs:
        msg = bot.send_message(chat_id, "‚ö†Ô∏è –í —á–∞—Ç–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_menu())
        save_message(chat_id, msg.message_id)
        return

    try:
        anim_msg = bot.send_message(chat_id, "üßπ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞: 0%")
        save_message(chat_id, anim_msg.message_id)
    except:
        anim_msg = None

    total = len(msgs)
    for i, msg_id in enumerate(msgs):
        try:
            bot.delete_message(chat_id, msg_id)
        except:
            pass

        if anim_msg and i % 5 == 0:
            try:
                percent = int((i / total) * 100)
                bot.edit_message_text(f"üßπ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞: {percent}%", chat_id, anim_msg.message_id)
            except:
                pass
        time.sleep(0.05)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if anim_msg:
        try:
            bot.edit_message_text("‚úÖ –í–∞—à —á–∞—Ç –æ—á–∏—â–µ–Ω!", chat_id, anim_msg.message_id, reply_markup=get_main_menu())
        except:
            bot.send_message(chat_id, "‚úÖ –í–∞—à —á–∞—Ç –æ—á–∏—â–µ–Ω!", reply_markup=get_main_menu())
    else:
        bot.send_message(chat_id, "‚úÖ –í–∞—à —á–∞—Ç –æ—á–∏—â–µ–Ω!", reply_markup=get_main_menu())

    user_messages[chat_id] = []

# ---------- –û –ë–û–¢–ï ----------
def show_about(message):
    text = f"""
ü§ñ <b>–û –±–æ—Ç–µ</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:
üìö –ö–µ–π—Å—ã ‚Äî –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤  
üë®‚Äçüè´ –¢–∞—Ä–∏—Ñ—ã ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞  
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º  

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞ —Å–≤—è–∑–∏: <b>Danila Kalyakin</b>  
–ö–æ–Ω—Ç–∞–∫—Ç: https://t.me/{admin_username}
"""
    msg = bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=get_main_menu())
    save_message(message.chat.id, msg.message_id)

# ---------- –ó–ê–Ø–í–ö–ê ----------
def start_application(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ:", reply_markup=types.ReplyKeyboardRemove())
    save_message(chat_id, msg.message_id)
    bot.register_next_step_handler(msg, get_application_name)

def get_application_name(message):
    chat_id = message.chat.id
    name = message.text
    msg = bot.send_message(chat_id, "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=types.ReplyKeyboardRemove())
    save_message(chat_id, msg.message_id)
    bot.register_next_step_handler(msg, get_application_phone, name)

def get_application_phone(message, name):
    chat_id = message.chat.id
    phone = message.text
    application = {"name": name, "phone": phone}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    save_application(application)

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
    admin_chat_id = 865082717  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
    bot.send_message(admin_chat_id, f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    msg = bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.", reply_markup=get_main_menu())
    save_message(chat_id, msg.message_id)

def save_application(application):
    if os.path.exists(APPLICATIONS_FILE):
        with open(APPLICATIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = []
    data.append(application)
    with open(APPLICATIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ---------- –†–ê–°–°–´–õ–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ê ----------
ADMIN_CHAT_ID = 865082717  # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

@bot.message_handler(commands=['broadcast'])
def broadcast_start(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    msg = bot.send_message(ADMIN_CHAT_ID, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    bot.register_next_step_handler(msg, broadcast_send)

def broadcast_send(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return
    text_to_send = message.text
    count = 0
    failed = 0
    for chat_id in user_messages.keys():
        try:
            bot.send_message(chat_id, text_to_send)
            count += 1
        except:
            failed += 1
    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")


# ---------- CALLBACK ----------
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data.startswith("tariff_"):
        name = call.data.replace("tariff_", "")
        desc = {
            "Elementary": "–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: –æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã –ø–æ–¥ –∫–ª—é—á.",
            "Average": "–°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è.",
            "PRO": "–ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ: –≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, —Å–∞–π—Ç, —Ä–µ–∫–ª–∞–º–∞."
        }.get(name, "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", url=f"https://t.me/{admin_username}"))
        msg = bot.send_message(call.message.chat.id, f"üìã <b>{name}</b>\n\n{desc}", parse_mode="HTML", reply_markup=markup)
        save_message(call.message.chat.id, msg.message_id)

# ---------- FLASK ----------
app = Flask(__name__)
WEBHOOK_URL = "https://botsmm.onrender.com/"  # <-- –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π URL

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL + TOKEN)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
